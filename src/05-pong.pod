=head0 Pong!

X<Pong>
X<Atari>
X<Allan Alcorn>

Pong is one of the first popular video games in the world. Allan Alcorn created
it for Atari, Inc. Its release in 1972 was both Atari's first game ever and the
spark which began the video game industry.

Pong simulates a table tennis match ("ping pong"). Each player controls a
paddle which moves vertically on the screen to hit a ball bouncing back and
forth between the players. You earn a point if your opponent is unable to
return the ball to your side of the screen.

You can recreate Pong yourself with Perl and SDL.

=head1 The Basic Screen

Start by making a simple screen for Pong. Open a file
in your favourite text editor and type:

=begin programlisting

    #!/usr/bin/perl
    use strict;
    use warnings;

    use SDL;
    use SDLx::App;

    # create the main screen
    my $app = SDLx::App->new(
        width        => 500,
        height       => 500,
        title        => 'My Pong Clone!',
        dt           => 0.02,
        exit_on_quit => 1,
    );

    # let's roll!
    $app->run;

=end programlisting

Save this file as F<pong.pl> and run it by typing on the command line:

=begin screen

  $ B<perl pong.pl>

=end screen

You should see a 500x500 black window entitled I<"My Pong Clone!">. The only
new feature you might not have seen before is the C<dt> parameter to the
C<SDLx::App> constructor. This represents the length, in seconds, of a movement
step as managed by an C<SDLx::Controller> object. Because the C<SDLx::App>
object is also an C<SDLx::Controller> object, it can handle C<SDL_QUIT> events.

=begin sidebar

B<Game Loop Granularity>

The game loop runs using a process that performs calculus on the time progression. 
To do this it uses the C<dt> parameter of C<SDLx::App>. C<dt> by default is set to C<0.01> 
granularity. In simple terms C<dt> determines how many small steps in movement ( calls to 
the move handler ) should be made per each render ( call to the show handler ). 

What is important to remember is that the C<dt> granularity must never be set so big that 
it fails to capture collisions and interaction between moving objects. This can especially
happen with fast moving objects such as bullets, but the principle applies to many situation.
On the other hand having a too fine granularity taxes the CPU resources. 

=end sidebar 

=head1 Game Objects

There are three main game objects in Pong: two player paddles and the bouncing
ball. Paddles are rectangles moving which move vertically. They're easy to
represent with L<SDLx::Rect> objects. First, put C<SDLx::Rect> in your module's
declarations:

=for programlisting 

    use SDL;
    use SDLx::App;
    B<use SDLx::Rect;>

=end for

Next, add a hash reference to store the first player's paddle. Using a hash
reference allows the possibility of adding more information later. In a more
complex game, consider using an actual object which I<contains> an
C<SDLx::Rect>. For now, this will suffice:

=begin programlisting

    B<my $player1 = {>
          B<< paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40 ), >>
    B<};>

    # let's roll!
    $app->run;

=end programlisting

This creates a 10x40 paddle rect for the first player on the left side of the
screen (C<< x = 10 >>) and somewhat in the center (C<< y = $app->h / 2 >>). The
second player's paddle is similar:

    B<my $player2 = {>
         B<< paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40), >>
    B<};>

    # let's roll!
    $app->run;

The second paddle needs to appear on the right side of the screen, so its C<x>
position is the screen's width minus 20. As the paddle has a width of 10 and
the C<x> position refers to the rect's top-left corner, the paddle has a 10
pixel margin from the right edge of the screen.

Finally, the bouncing ball is a 10x10 rect in the middle of the screen:

    B<my $ball = {>
        B<< rect => SDLx::Rect->new( $app->w / 2, $app->h / 2, 10, 10 ), >>
    B<};

    # let's roll!
    $app->run;

Just like the original Pong, this ball is square.

=head2 Show it Off

With the game objects created, add a show handler to render them to the screen:

=begin programlisting

    B<$app->add_show_handler(>
        B<sub {>
            B<# first, clear the screen>
            B<< $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0x000000FF ); >>

            B<# then render the ball>
            B<< $app->draw_rect( $ball->{rect}, 0xFF0000FF ); >>

            B<# ... and each paddle>
            B<< $app->draw_rect( $player1->{paddle}, 0xFF0000FF ); >>
            B<< $app->draw_rect( $player2->{paddle}, 0xFF0000FF ); >>

            B<# finally, update the screen>
            B<< $app->update; >>
        B<}>
    B<);>

    # let's roll!
    $app->run;

=end programlisting

This approach is rather simple. The code clears the screen by painting a black
rectangle the size of the screen, then painting opaque red (C<< 0xFF0000FF >>)
rectangles in each object's position.

The result can be seen on the screenshot:

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/pong1.png}
        \caption{First view of our Pong clone}
         \label{fig:pong1}

=head1 Moving the Player's Paddle

X<movement>

It's time to let the player move the left paddle! Remember that motion is
merely changing an object's position with respect to time. If this motion is,
in the game, a magical teleportation, you can change the (x, y) coordinates and
be done with it. If the motion needs to represent some sort of realistic
physics, the object needs to move at an understood speed.  Pong paddles have a
constant speed, so there's no need to model acceleration.  Also, as paddles
move only vertically, the game only needs to track vertical velocity. Add a
C<v_y> element to each paddle structure:

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40 ),
           B<< v_y    => 0, >>
      };

X<velocity>
X<displacement>

Now what? How does this new attribute help modify the position of a paddle?
Velocity represents the I<displacement> how much displacement happens in a unit
of time, as in 20 km/h or 4 m/s. In this Pong clone, the unit of time is the
app's C<dt>. The velocity of a paddle is C<v_y> pixels per C<dt>. Here is where
the motion handlers come in handy:

    B<# handles the player's paddle movement>
    B<< $app->add_move_handler( sub { >>
        B<my ( $step, $app ) = @_;>
        B<< my $paddle = $player1->{paddle}; >>
        B<< my $v_y    = $player1->{v_y}; >>

        B<< $paddle->y( $paddle->y ( $v_y * $step ) ); >>
    B<});>

If you recall previous chapters, the code should be straightforward. When
C<v_y> is 0 at any given run cycle, the paddle won't change its C<y> position.
If, however, there is a vertical velocity, the code updates the C<y> position
based on how much of the expected cycle time (the app's C<dt>) has passed. A
value of 1 in C<$step> indicates a full cycle has occurred, so that C<< $v_y *
$step >> is the same as C<< $v_y * 1 >>, which simplifies to C<< $v_y >> -- the
desired speed for one cycle. If the handler gets called more frequently, the
paddle will move a relatively shorter amount.

=head2 Rinse and Repeat

The second player's paddle will use the same motion mechanics, so it won't hurt to prepare for its motion:

=begin programlisting

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
           B<< v_y    => 0, >>
      };

=end programlisting

And add another motion handler, just like our player's:

=begin programlisting

    B<# handles AI's paddle movement>
    B<< $app->add_move_handler( sub { >>
        B<my ( $step, $app ) = @_;>
        B<< my $paddle = $player2->{paddle}; >>
        B<< my $v_y    = $player2->{v_y}; >>

        B<< $paddle->y( $paddle->y ( $v_y * $step ) ); >>
    B<});>

=end programlisting

=begin sidebar

For the sake of simplicity of explanation, this code has repetition a real
program would not want. This repetition could go away in several ways. You
could use an array to hold all moving elements. You could use a helper function
to create a new closure for each paddle. You could turn the game object hash
references into real objects and add a C<move()> or C<update_position()>
method.

=end sidebar

=head2 Move that Paddle!

Paddle velocity C<v_y> has a default value of zero, so paddles begin by not
moving. That's good, until the player wants to move the paddle. To divine the
player's intent, the program must bind the up and down arrow keys of the
keyboard to manipulate the positive and negative velocity of the paddle through
an event hook. This means loading the L<SDL::Events> module:

=begin programlisting

     use SDL;
     B<use SDL::Events;>
     use SDLx::App;
     use SDLx::Rect;

=end programlisting

... and creating an event hook:

=begin programlisting

   B<# handles keyboard events>
   B<$app->add_event_handler(>
       B<sub {>
           B<my ( $event, $app ) = @_;>

           B<# user pressing a key>
           B<< if ( $event->type == SDL_KEYDOWN ) { >>

               B<# up arrow key means going up (negative velocity)>
               B<< if ( $event->key_sym == SDLK_UP ) { >>
                   B<< $player1->{v_y} = -2; >>
               B<}>

               B<# down arrow key means going down (positive velocity)>
               B<< elsif ( $event->key_sym == SDLK_DOWN ) { >>
                   B<< $player1->{v_y} = 2; >>
               B<}>
           B<}>
           B<# user releasing a key>
           B<< elsif ( $event->type == SDL_KEYUP ) { >>

               B<# up or down arrow keys released, stop the paddle>
               B<if (>
                       B<< $event->key_sym == SDLK_UP >>
                    B<< or $event->key_sym == SDLK_DOWN >>
               B<) {>
                   B<< $player1->{v_y} = 0; >>
               B<}>
           B<}>
       B<}>
   B<);>

=end programlisting

Again, there's nothing new. Whenever the user presses the up arrow key, the
paddle should move up.  Keep in mind that the origin point of 0, 0 in SDL is
the top-left corner, so a negative C<v_y> will decrease the paddle's C<y> and
send it B<up> the screen. Similarly, adding a positive value to C<v_y> whenever
the user presses the down arrow key will move the paddle down.  When the user
releases either arrow key, assigning zero to C<v_y> stops the motion.

=head1 A Bouncing Ball

The ball's movement is similar to that of either paddle, except that it also
has a horizontal velocity component of C<v_x>. Add that to the ball structure:

=begin programlisting

     my $ball = {
         rect => SDLx::Rect->new( $app->w / 2, $app->h / 2, 10, 10 ),
         B<< v_x  => -2.7, >>
         B<< v_y  => 1.8, >>
     };

=end programlisting

The ball will have an initial velocity of -2.7 horizontally and 1.8 vertically.
Just as a negative vertical velocity moves the object up, a negative horizontal
velocity moves it towards the left side of the screen. The ball also needs a
motion handler to update its position according to its velocity:

=begin programlisting

   # handles the ball movement
   $app->add_move_handler( sub {
       my ( $step, $app ) = @_;
       my $ball_rect      = $ball->{rect};

       $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
       $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
   });

=end programlisting

All of these motion handlers look similar so far, but if you're paying close
attention, you can probably spot a bug caused by missing code. Try running the
game.  You'll see the ball going, going, and gone!

This handler needs to confine the ball to the screen. Whenever the ball reaches
a top or bottom edge of the screen, it needs to bounce. That's easy enough to
add:

=begin programlisting

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect      = $ball->{rect};

         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );

         B<< # collision to the bottom of the screen >>
         B<< if ( $ball_rect->bottom >= $app->h ) { >>
             B<< $ball_rect->bottom( $app->h ); >>
             B<< $ball->{v_y} *= -1; >>
         B<< } >>

         B<< # collision to the top of the screen >>
         B<< elsif ( $ball_rect->top <= 0 ) { >>
             B<< $ball_rect->top( 0 ); >>
             B<< $ball->{v_y} *= -1; >>
         B<< } >>
     });

=end programlisting

If the new y (C<"bottom"> or C<"top">) value would take the ball off the screen
in part or in whole, the handler updates the ball's position with the furthest
position possible while remaining on the screen, so that the ball will only
ever I<touch> that edge. The handler also reverses C<y_y> so that the ball will
bounce back onto the screen going the opposite direction at the same speed.

=head2 He shoots... and scores!!

That fixes one bug, but what should happen when the ball hits the left or right
edges of the screen? According to the rules of Pong, this means the player on
the opposite side scored a point, and the ball should go back to the center of
the screen. Start by adding a C<score> attribute for each player:

=begin programlisting

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
           v_y    => 0,
           B<< score  => 0, >>
      };

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
           v_y    => 0,
           B<< score  => 0, >>
      };

=end programlisting

Then update the ball's motion handler to handle the out of bounds condition for
the left and right borders:

=begin programlisting

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect      = $ball->{rect};

         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );

         # collision to the bottom of the screen
         if ( $ball_rect->bottom >= $app->h ) {
             $ball_rect->bottom( $app->h );
             $ball->{v_y} *= -1;
         }

         # collision to the top of the screen
         elsif ( $ball_rect->top <= 0 ) {
             $ball_rect->top( 0 );
             $ball->{v_y} *= -1;
         }

         B<< # collision to the right: player 1 score! >>
         B<< elsif ( $ball_rect->right >= $app->w ) { >>
             B<< $player1->{score}++; >>
             B<< reset_game(); >>
             B<< return; >>
         B<< } >>

         B<< # collision to the left: player 2 score! >>
         B<< elsif ( $ball_rect->left <= 0 ) { >>
             B<< $player2->{score}++; >>
             B<< reset_game(); >>
             B<< return; >>
         B<< } >>
     });

=end programlisting

If the ball hits the right edge of the screen (the app's width), we increase
player 1's score, call C<reset_game()>, and return without updating the ball's
position. If the ball hits the left edge of the screen, do the same for player
2.

The C<reset_game()> function must return the ball to the center of the screen:

=begin programlisting

     B<< sub reset_game { >>
         B<< $ball->{rect}->x( $app->w / 2 ); >>
         B<< $ball->{rect}->y( $app->h / 2 ); >>
     B<< } >>

=end programlisting

=head1 Collision Detection: The Ball and The Paddle

The game's existing collision detection is very simple because the paddles and
ball can only collide with the fixed edges of the screen. The game gets more
interesting when it can detect whether the ball and a paddle collide--or
rather, intersect.

X<Separating Axis Theorem>

The Separating Axis Theorem roughly states that two convex shapes in a 2D plane
I< do not> intersect if and only you can place a line which separates them.
Because the paddles and the ball are rectangular I<and> aligned along one axis,
detecting a collision means choosing one item and testing its top, right,
bottom, and left lines for intersection. If any other object is on one side or
the other of those four lines, there is no collision. Otherwise, there is a
collision.

In more general terms, given two rects A and B, you can establish several
conditions:

=for figure
       \includegraphics[width=0.9\textwidth]{../src/images/collision.png}
        \caption{if B is completely to the left, right, top or bottom of A, they do NOT intersect}
         \label{fig:pong1}


=over 4

=item * if A's bottom side is above B's top side, then A is completely
above B (fig. 6.2.1).

=item * if A's top side is below B's bottom side, then A is completely
below B (fig. 6.2.2).

=item * if A's right side is to the left of B's left side, then A is
completely to the left of B (fig. 6.2.3).

=item * if A's left side is to the right of B's right side, then A is
completely to the right of B (fig 6.2.4).

=back

Keep in mind that SDL's origin point of 0, 0 is always the top left corner.
This produces a simple generic C<check_collision()> function which returns true
of two rect objects have collided:

=begin programlisting

     sub check_collision {
         my ($A, $B) = @_;

         return if $A->bottom < $B->top;
         return if $A->top    > $B->bottom;
         return if $A->right  < $B->left;
         return if $A->left   > $B->right;

         # we have a collision!
         return 1;
     }

=end programlisting

The ball motion handler can now test to see if the ball has hit either paddle:

=begin programlisting

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect = $ball->{rect};

         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );

         # collision to the bottom of the screen
         if ( $ball_rect->bottom >= $app->h ) {
             $ball_rect->bottom( $app->h );
             $ball->{v_y} *= -1;
         }

         # collision to the top of the screen
         elsif ( $ball_rect->top <= 0 ) {
             $ball_rect->top( 0 );
             $ball->{v_y} *= -1;
         }

         # collision to the right: player 1 score!
         elsif ( $ball_rect->right >= $app->w ) {
             $player1->{score}++;
             reset_game();
             return;
         }

         # collision to the left: player 2 score!
         elsif ( $ball_rect->left <= 0 ) {
             $player2->{score}++;
             reset_game();
             return;
         }

         B<< # collision with player1's paddle >>
         B<< elsif ( check_collision( $ball_rect, $player1->{paddle} )) { >>
             B<< $ball_rect->left( $player1->{paddle}->right ); >>
             B<< $ball->{v_x} *= -1; >>
         B<< } >>

         B<< # collision with player2's paddle >>
         B<< elsif ( check_collision( $ball_rect, $player2->{paddle} )) { >>
             B<< $ball->{v_x} *= -1; >>
             B<< $ball_rect->right( $player2->{paddle}->left ); >>
         B<< } >>
     });

=end programlisting

That's it! If the ball hits the first player's paddle, the handler reverses its
horizontal velocity (C<v_x>) to make it bounce back, and set its left edge to
the paddle's right so they don't overlap. The logic is similar for the second
player's paddle, except that the ball's right edge now must be at the same
position as the paddle's left, as the ball has hit the other side of the
paddle.

=head1 Artificial Stupidity

This Pong game is almost done. With scoring, ball movement, and paddle
movement, it's playable--but dull, unless the second player can move. It's easy
enough to bind a secondary set of keys to move the second paddle, but what if
you want a quick game on your own without a friend around?

Artificial intelligence for games is a complex field of study, with many
algorithms. Fortunately, the easiest approach is simple to model for Pong: the
second player's paddle should follow the ball as it moves. All that takes is
some new code in the second player's motion handler:

=begin programlisting

      # handles AI's paddle movement
      $app->add_move_handler( sub {
          my ( $step, $app ) = @_;
          my $paddle         = $player2->{paddle};
          my $v_y            = $player2->{v_y};

          B<< if ( $ball->{rect}->y > $paddle->y ) { >>
              B<< $player2->{v_y} = 1.5; >>
          B<< } >>
          B<< elsif ( $ball->{rect}->y < $paddle->y ) { >>
              B<< $player2->{v_y} = -1.5; >>
          B<< } >>
          B<< else { >>
              B<< $player2->{v_y} = 0; >>
          B<< } >>

          $paddle->y( $paddle->y + ( $v_y * $step ) );
      });

=end programlisting

If the ball is below the paddle (if its C<y> value is greater than the C<y>
value of the paddle), the paddle needs a positive velocity to go downwards. If,
otherwise, the ball has a lower C<y> value, the paddle's C<v_y> gets a negative
value. If the ball is somewhere in between those two values, the paddle stays
in place.

=head1 Cosmetics: Displaying the Score

X<C<SDLx::Text>>

All that's left is polish. Displaying the score means drawing text to the
screen. That's the purpose of the C<SDLx::Text> module:

=begin programlisting

     use SDL;
     use SDL::Events;
     use SDLx::App;
     use SDLx::Rect;
     B<< use SDLx::Text; >>

=end programlisting

Create an object to represent the display of the score:

=begin programlisting

    B<< my $score = SDLx::Text->new( font => 'font.ttf', h_align => 'center' ); >>

=end programlisting

The optional C<font> parameter specifies the path to a TrueType Font. Feel free
to change F<font.ttf> as you like. Otherwise, leave out this parameter and SDL
will use the bundled default font. The other parameter, C<h_align>, allows you
to specify the horizontal alignment of rendered text. The default is left
alignment.

Add the score object to the show handler to display it:

=begin programlisting

      $app->add_show_handler(
          sub {
              # first clear the screen
              $app->draw_rect( [0, 0, $app->w, $app->h], 0x000000FF );

              # then render the ball
              $app->draw_rect( $ball->{rect}, 0xFF0000FF );

              # ... and each paddle
              $app->draw_rect( $player1->{paddle}, 0xFF0000FF );
              $app->draw_rect( $player2->{paddle}, 0xFF0000FF );

              B<< # ... and each player's score! >>
              B<< $score->write_to( >>
                  B<< $app, >>
                  B<< $player1->{score} . ' x ' . $player2->{score} >>
              B<< ); >>

              # finally, update the screen
              $app->update;
          }
      );

=end programlisting

The C<write_to()> call will write to any surface passed as the first
argument--in this case, the app itself. The second argument is the string to
render. Note that the string's when rendered is relative to the surface to
which it writes. The default position is (0, 0). Because the C<$score> object
has horizontal centering, the text will write to the top and center of the
screen--not the top and left.

The result is:

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/pong2.png}
        \caption{our finished Pong clone, in all its glory}
         \label{fig:pong2}


=head1 Exercises

Pong is a simple game, but there's plenty of room for polish. Here's your
chance to add some features. Of course, there's always more than one way to do
things:

=over 4

=item 1 

Every time a player scores, the ball goes back to the middle but
has the same sense and direction as before. See if you can make it restart
at a random direction instead.

=item 2 

Red is boring. How about a psychedelic Pong? Pick three different
colors and make each paddle oscillate between them every time the ball hits it.

=back

=head2 Answers

=over 4

=item 1 

To make the ball restart at a random direction, update C<reset_game()>
function to set the ball's C<v_x> and C<v_y> to a random value between.
Anything between positive 1.5 and 2.5 works well:

=begin programlisting

     sub reset_game {
         $ball->{rect}->x( $app->w / 2 );
         $ball->{rect}->y( $app->h / 2 );

         B<< $ball->{v_x} = (1.5 + int rand 1) * (rand 2 > 1 ? 1 : -1); >>
         B<< $ball->{v_y} = (1.5 + int rand 1) * (rand 2 > 1 ? 1 : -1); >>
     }

=end programlisting

=item 2 

Start by representing the available colors. You could use separate
colors or hues for each player, but for simplicity this code uses a single
group of colors. Each player's hash will contain the index into this array:

=begin programlisting

      B<< my @colors = qw( 0xFF0000FF 0x00FF00FF 0x0000FFFF 0xFFFF00FF ); >>

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
           v_y    => 0,
           score  => 0,
           B<< color => 0, >>
      };

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
           v_y    => 0,
           score  => 0,
           B<< color => 0, >>
      };

=end programlisting

Now make the ball's color change every time a paddle hits it:

=begin programlisting

     # handles the ball movement
     $app->add_move_handler( sub {

        ...

         # collision with player1's paddle
         elsif ( check_collision( $ball_rect, $player1->{paddle} )) {
             $ball_rect->left( $player1->{paddle}->right );
             $ball->{v_x} *= -1;
             B<< $player1->{color} = ($player1->{color} + 1) % @colors; >>
         }

         # collision with player2's paddle
         elsif ( check_collision( $ball_rect, $player2->{paddle} )) {
             $ball->{v_x} *= -1;
             $ball_rect->right( $player2->{paddle}->left );
             B<< $player2->{color} = ($player2->{color} + 1) % @colors; >>
         }
     });

=end programlisting

Finally, change the show handler to use the current color referenced by
C<color>, instead of the previously hardcoded value:

=begin programlisting

      $app->add_show_handler(
          sub {
              # first clear the screen
              $app->draw_rect( [0, 0, $app->w, $app->h], 0x000000FF );

              # then render the ball
              $app->draw_rect( $ball->{rect}, 0xFF0000FF );

              # ... and each paddle
              B<< $app->draw_rect( $player1->{paddle}, $colors[ $player1->{color} ] ); >>
              B<< $app->draw_rect( $player2->{paddle}, $colors[ $player2->{color} ] ); >>
              ...

              # finally update the screen
              $app->update;
          }
      );

=end programlisting

=back

=head1 Author

This chapter's content graciously provided by Breno G. de Oliveira (C<garu>).

=for vim: spell
