=head0 Handling Events

X<event>

The cornerstone of an SDL application is event handling. The user presses a key
or moves the mouse. The operating system switches the focus of the active
window. The user selects the quit option from the menu or the operating system. These are all events. How do you handle them?

X<events; queue>
X<C<SDL::Event>>

SDL provides an event queue which holds all events that occur until they are
removed. Every time an event occurs, SDL places it into the queue. The
C<SDL::Event> object represents this queue in Perl, allowing you to add and
remove events constantly:

=begin programlisting

	use strict;
	use warnings;
	use SDL;
	use SDL::Event;
	use SDL::Events;
	use SDLx::App;

	my $app   = SDLx::App->new( w => 200, h => 200 );
	my $event = SDL::Event->new();
	
	my $quit  = 0;

	while (!$quit) {
        # Updates the queue to recent events
        SDL::Events::pump_events();

		# process all available events
		while ( SDL::Events::poll_event($event) ) {

			# check by Event type
			do_key() if $event->type == SDL_KEYDOWN;
		}
	}

	sub do_key { $quit = 1 }

=end programlisting

X<C<SDL_ACTIVEEVENT>>
X<C<SDL_KEYDOWN>>
X<C<SDL_KEYUP>>
X<C<SDL_MOUSEMOTION>>
X<C<SDL_MOUSEBUTTONDOWN>>
X<C<SDL_MOUSEBUTTONUP>>
X<C<SDL_JOYAXISMOTION>>
X<C<SDL_JOYBALLMOTION>>
X<C<SDL_JOYHATMOTION>>
X<C<SDL_JOYBUTTONDOWN>>
X<C<SDL_JOYBUTTONUP>>
X<C<SDL_QUIT>>
X<C<SDL_SYSWMEVENT>>
X<C<SDL_VIDEORESIZE>>
X<C<SDL_VIDEOEXPOSE>>
X<C<SDL_USEREVENT>>

Every event has an associated type which represents the category of the event.
The previous example looks for a keypress event N<SDL separates the event of
pressing a key from the event of releasing a key, which allows you to identify
combinations of keypresses, such as Ctrl + P to print.>. The SDL library
defines several types of events, and SDL_perl makes them available as constants
with names such as C<SDL_KEYDOWN> and C<SDL_QUIT>. See C<perldoc SDL::Events>
for a list of all event types.

X<C<SDLx::Controller>>

Checking for every possible event type within that event loop can be tedious.
The C<SDLx::Controller> available from the C<SDLx::App> offers the use of event
callbacks with which to handle events. Processing events is a matter of setting
up the appropriate callbacks and letting SDL do the heavy work.

=for sidebar

B<SDL Events Types> 

Additional Event types that can be captured by SDL are:

=over

=item Keyboard 

C<SDL_KEYDOWN> C<SDL_KEYUP> - Keyboard button pressed 

=item Mouse 

C<SDL_MOUSEMOTION> - Mouse motion occured 

C<SDL_MOUSEBUTTONDOWN> C<SDL_MOUSEBUTTONUP> - Mouse button pressed 

=item Joystick 

C<SDL_JOYAXISMOTION> - Joystick axis motion 

C<SDL_JOYBALLMOTION> - Joystick trackball motion

C<SDL_JOYHATMOTION> - Joystick hat position change 

C<SDL_JOYBUTTONDOWN> C<SDL_JOYBUTTONUP> - Joystick button pressed 

=item Window & System  

C<SDL_ACTIVEEVENT> - Application visibility 

C<SDL_VIDEORESIZE> - Window resized 

C<SDL_VIDEOEXPOSE> - Window exposed 

C<SDL_QUIT> - Quit requested 

C<SDL_USEREVENT> - A user-defined event type 

C<SDL_SYSWMEVENT> - Platform-dependent window manager event 

=back 

For more information look at:

	perldoc SDL::Event 

=end for

=head1 Quitting with Grace

The example applications so far have not exited cleanly. Handling quit events
is much better:

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDLx::App;

    my $app = SDLx::App->new(
        w     => 200,
        h     => 200,
        d     =>  32,
        title => "Quit Events"
    );

    $app->add_event_handler( \&quit_event );
    $app->run();

    sub quit_event
    {
        # the callback receives the appropriate SDL::Event
	    my $event = shift;

	    # ... as well as the calling SDLx::Controller
	    my $controller = shift;

        # stopping the controller will exit $app->run() for us
	    $controller->stop if $event->type == SDL_QUIT;
    }

=end programlisting

C<SDLx::App> calls the event_handlers, from an internal C<SDLx::Controller>.
When this event handler receives a quit event, it calls
C<SDLx::Controller::stop()> which causes C<SDLx::App> to exit gracefully.

=head2 Exit on Quit

Exiting on receiving the C<SDL_QUIT> event is such a common operation that
C<SDLx::App> provides it as a constructor option:

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDLx::App;

    my $app = SDLx::App->new(
        w            => 200,
        h            => 200,
        d            =>  32,
        title        => "Quit Events",
        exit_on_quit => 1
    );

    $app->run();

=end programlisting

=head1 Small Paint: Input Devices

SDL events also allow input handling. Consider a simple paint program. It will
provide a small black window. Moving the mouse draws on this window. Pressing a
number key chooses a paint color.  Pressing C<q> or C<Q> exits the program.
Pressing C<c> or C<C> clears the screen. Pressing C<Ctrl-S> saves the image to
a file named F<painted.bmp>.

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/painted.png}
        \caption{Simple Paint: Smile}
         \label{fig:Smile}

=head2 Saving the image

Start by defining the saving function:

=begin programlisting

    sub save_image {
        if (SDL::Video::save_BMP( $app, 'painted.bmp' ) == 0
        && -e 'painted.bmp')
        {
             warn 'Saved painted.bmp to ' . cwd();
        }
        else
        {
            warn 'Could not save painted.bmp: ' . SDL::get_errors();
        }
    }

=end programlisting

=head2 Keyboard

Keyboard handling requires some color data as well as a keypress callback:

=begin programlisting
    # Color array
    my @colors = (  0xFF0000FF, 0x00FF00FF,
                    0x0000FFFF, 0xFFFF00FF,
                    0xFF00FFFF, 0x00FFFFFF,
                    0xCCFFCCFF, 0xFFCC33FF,
                    0x000000FF, 0xFFFFFFFF );

    my $brush_color = 0;

    sub keyboard_event
    {
        my $event = shift;

        if ( $event->type == SDL_KEYDOWN )
        {
            # convert the key_symbol (integer) to a keyname
            my $key_name = SDL::Events::get_key_name( $event->key_sym );

            # if $key_name is a digit, use it as a color
            $brush_color = $key_name if $key_name =~ /^\d$/;

            # get the keyboard modifier (see perldoc SDL::Events)
            my $mod_state = SDL::Events::get_mod_state();

            # we are using any CTRL so KMOD_CTRL is fine
            save_image() if $key_name =~ /^s$/ && ($mod_state & KMOD_CTRL);

            # clear the screen
            $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 )
                if $key_name =~ /^c$/;

            # exit
            $app->stop() if $key_name =~ /^q$/;
        }

        $app->update();
    }

    $app->add_event_handler(\&quit_event);
    $app->add_event_handler(\&keyboard_event);

=end programlisting

=begin sidebar

B<NOTE: > When adding a callback to C<SDLx::App> which uses variables declared
outside of the function (C<$brush_color> and C<@colors> in this case), be sure
to define them before declaring the subroutine. Normal Perl scoping and
initialization rules apply.

=end sidebar

=head2 Mouse

Handling mouse events is almost as straightforward as keyboard events:

=begin programlisting

    # track the drawing status
    my $drawing = 0;

    sub mouse_event {
        my $event = shift;

        # detect Mouse Button events and check if user is currently drawing
        if ($event->type == SDL_MOUSEBUTTONDOWN || $drawing)
        {
            # set drawing to 1
            $drawing = 1;

            # get the X and Y values of the mouse
            my $x = $event->button_x;
            my $y = $event->button_y;

            # draw a rectangle at the specified position
            $app->draw_rect( [ $x, $y, 2, 2 ], $colors[$brush_color] );

            $app->update();
        }

        # disable drawing when user releases mouse button
        $drawing = 0 if ($event->type == SDL_MOUSEBUTTONUP );
    }

    $app->add_event_handler( \&mouse_event );

=end programlisting

This is all of the code necessary to make a simple drawing application.

Take note of two things. First, SDL_perl invokes the event handlers in the
order of attachment. If the user presses C<Q> and then moves the mouse, the
application will quit before processing the mouse movement.

Second, the application makes no distinction between right, middle, or left
mouse clicks. SDL provides this information. See the C<button_button()> method
in C<SDL::Event>.

=for vim: spell
